// 重命名文件: TimeStopAchievementDetailView.swift
// 此文件负责展示成就详情页面

// 明确地导入SwiftUI，并禁用UIKit中的冲突类型
import SwiftUI

// 定义一个命名空间包装，避免命名冲突
internal enum SUI {
    typealias Circle = SwiftUI.Circle
    typealias Color = SwiftUI.Color
    typealias Text = SwiftUI.Text
    typealias Image = SwiftUI.Image
    typealias RoundedRectangle = SwiftUI.RoundedRectangle
    typealias View = SwiftUI.View
    typealias VStack = SwiftUI.VStack
    typealias HStack = SwiftUI.HStack
    typealias ZStack = SwiftUI.ZStack
    typealias ScrollView = SwiftUI.ScrollView
    typealias Spacer = SwiftUI.Spacer
    typealias Button = SwiftUI.Button
    typealias LinearGradient = SwiftUI.LinearGradient
    typealias Gradient = SwiftUI.Gradient
    typealias ForEach = SwiftUI.ForEach
    typealias Group = SwiftUI.Group
    typealias EnvironmentObject = SwiftUI.EnvironmentObject
    typealias Environment = SwiftUI.Environment
    typealias State = SwiftUI.State
    typealias StrokeStyle = SwiftUI.StrokeStyle
    typealias Font = SwiftUI.Font
    typealias Animation = SwiftUI.Animation
    typealias CGFloat = CoreGraphics.CGFloat
    typealias UIScreen = UIKit.UIScreen
    typealias EdgeInsets = SwiftUI.EdgeInsets
    
    enum Font {
        typealias Weight = SwiftUI.Font.Weight
    }
}

// Explicit import for any other frameworks that might be causing ambiguity
// Add other imports if needed


// 使用显式的SwiftUI.Circle()来避免与可能的UIKit Circle重名冲突
// 因为项目中的扩展方法可能同时使用了SwiftUI和UIKit

struct TimeStopAchievementDetailView: SUI.View {
    let type: AchievementType
    let level: Int
    let minutes: Int
    
    @EnvironmentObject var themeManager: ThemeManager
    @State private var animateProgress = false
    
    // 计算下一级所需分钟数
    var minutesToNextLevel: Int {
        if level >= type.levelThresholds.count {
            return 0 // 已达最高级
        }
        return type.minutesToNextLevel(for: minutes)
    }
    
    // 计算等级进度百分比
    var progressPercentage: Double {
        return type.progressPercentage(for: minutes)
    }
    
    var body: some SUI.View {
        SUI.ScrollView {
            SUI.VStack(spacing: 24) {
                // 成就图标和标题
                SUI.VStack(spacing: 16) {
                    // 成就图标
                    SUI.ZStack {
                        SUI.Circle()
                            .fill(type.color.opacity(0.2))
                            .frame(width: 100, height: 100)
                            .shadow(color: type.color.opacity(0.5), radius: 8, x: 0, y: 4)
                        
                        SUI.Circle()
                            .stroke(type.levelColor(level), lineWidth: 3)
                            .frame(width: 100, height: 100)
                        
                        SUI.Image(systemName: type.icon)
                            .font(SUI.Font.system(size: 50))
                            .foregroundColor(type.color)
                    }
                    
                    // 成就名称和等级
                    SUI.VStack(spacing: 8) {
                        SUI.Text(type.name)
                            .font(SUI.Font.title2)
                            .fontWeight(SUI.Font.Weight.bold)
                            .foregroundColor(getTextColor())
                        
                        SUI.Text(type.levelDescription(level))
                            .font(SUI.Font.title3)
                            .fontWeight(SUI.Font.Weight.semibold)
                            .foregroundColor(type.color)
                            .padding(.horizontal, 16)
                            .padding(.vertical, 4)
                            .background(type.color.opacity(0.2))
                            .cornerRadius(8)
                    }
                }
                .padding(.top)
                
                // 等级指示器
                SUI.HStack(spacing: 12) {
                    SUI.ForEach(0..<6) { index in
                        SUI.VStack(spacing: 4) {
                            SUI.Circle()
                                .fill(index < level ? type.color : SUI.Color.gray.opacity(0.3))
                                .frame(width: 16, height: 16)
                            
                            SUI.Text("\(index + 1)")
                                .font(SUI.Font.caption2)
                                .foregroundColor(index < level ? type.color : SUI.Color.gray)
                        }
                    }
                }
                .padding(.horizontal)
                
                // 进度卡片
                SUI.VStack(spacing: 16) {
                    // 当前进度
                    SUI.HStack {
                        SUI.VStack(alignment: .leading, spacing: 4) {
                            SUI.Text("当前累计时间")
                                .font(SUI.Font.headline)
                                .foregroundColor(getTextColor())
                            
                            if minutes >= 60 {
                                SUI.Text("\(minutes / 60)小时\(minutes % 60)分钟")
                                    .font(SUI.Font.title3)
                                    .fontWeight(SUI.Font.Weight.semibold)
                                    .foregroundColor(type.color)
                            } else {
                                SUI.Text("\(minutes)分钟")
                                    .font(SUI.Font.title3)
                                    .fontWeight(SUI.Font.Weight.semibold)
                                    .foregroundColor(type.color)
                            }
                        }
                        
                        SUI.Spacer()
                        
                        // 累计时间图标
                        SUI.Image(systemName: "clock.fill")
                            .font(SUI.Font.system(size: 30))
                            .foregroundColor(getTextColor().opacity(0.7))
                    }
                    
                    // 进度条
                    SUI.VStack(alignment: .leading, spacing: 8) {
                        // 进度百分比
                        SUI.HStack {
                            SUI.Text("等级进度")
                                .font(SUI.Font.subheadline)
                                .foregroundColor(getTextColor().opacity(0.7))
                            
                            SUI.Spacer()
                            
                            SUI.Text("\(Int(progressPercentage * 100))%")
                                .font(SUI.Font.subheadline)
                                .fontWeight(SUI.Font.Weight.semibold)
                                .foregroundColor(type.color)
                        }
                        
                        // 自定义进度条
                        SUI.ZStack(alignment: .leading) {
                            // 背景
                            SUI.RoundedRectangle(cornerRadius: 6)
                                .fill(SUI.Color.gray.opacity(0.2))
                                .frame(height: 12)
                            
                            // 进度
                            SUI.RoundedRectangle(cornerRadius: 6)
                                .fill(type.color)
                                .frame(width: animateProgress ? 
                                      CGFloat(progressPercentage) * UIScreen.main.bounds.width * 0.8 : 0, 
                                      height: 12)
                                .animation(.easeInOut(duration: 1.0), value: animateProgress)
                        }
                        
                        // 时间里程碑标记
                        SUI.HStack {
                            if level > 0 && level < type.levelThresholds.count {
                                SUI.Text("\(type.levelThresholds[level-1])分钟")
                                    .font(SUI.Font.caption)
                                    .foregroundColor(SUI.Color.gray)
                                
                                SUI.Spacer()
                                
                                SUI.Text("\(type.levelThresholds[level])分钟")
                                    .font(SUI.Font.caption)
                                    .foregroundColor(SUI.Color.gray)
                            }
                        }
                    }
                }
                .padding()
                .background(getCardBackgroundColor())
                .cornerRadius(16)
                .shadow(color: type.color.opacity(0.2), radius: 5, x: 0, y: 2)
                
                // 下一等级信息
                if level < type.levelThresholds.count {
                    SUI.VStack(spacing: 12) {
                        SUI.Text("距离下一等级")
                            .font(SUI.Font.headline)
                            .foregroundColor(getTextColor())
                        
                        SUI.HStack {
                            SUI.Image(systemName: "arrow.up.forward.circle.fill")
                                .font(SUI.Font.system(size: 24))
                                .foregroundColor(type.color)
                            
                            SUI.Text(type.levelDescription(level + 1))
                                .font(SUI.Font.title3)
                                .fontWeight(SUI.Font.Weight.semibold)
                                .foregroundColor(type.color)
                        }
                        
                        if minutesToNextLevel > 0 {
                            SUI.HStack {
                                SUI.Text("还需")
                                    .font(SUI.Font.subheadline)
                                    .foregroundColor(getTextColor().opacity(0.7))
                                
                                if minutesToNextLevel >= 60 {
                                    SUI.Text("\(minutesToNextLevel / 60)小时\(minutesToNextLevel % 60)分钟")
                                        .font(SUI.Font.subheadline)
                                        .fontWeight(SUI.Font.Weight.bold)
                                        .foregroundColor(type.color)
                                } else {
                                    SUI.Text("\(minutesToNextLevel)分钟")
                                        .font(SUI.Font.subheadline)
                                        .fontWeight(SUI.Font.Weight.bold)
                                        .foregroundColor(type.color)
                                }
                            }
                        }
                    }
                    .padding()
                    .background(getCardBackgroundColor())
                    .cornerRadius(16)
                    .shadow(color: type.color.opacity(0.2), radius: 5, x: 0, y: 2)
                } else {
                    // 最高等级提示
                    SUI.VStack(spacing: 12) {
                        SUI.Image(systemName: "crown.fill")
                            .font(SUI.Font.system(size: 40))
                            .foregroundColor(SUI.Color.yellow)
                            .shadow(color: SUI.Color.orange.opacity(0.5), radius: 5, x: 0, y: 2)
                        
                        SUI.Text("恭喜！")
                            .font(SUI.Font.title3)
                            .fontWeight(SUI.Font.Weight.bold)
                            .foregroundColor(getTextColor())
                        
                        SUI.Text("已达到最高等级")
                            .font(SUI.Font.headline)
                            .foregroundColor(getTextColor().opacity(0.7))
                    }
                    .padding()
                    .background(getCardBackgroundColor())
                    .cornerRadius(16)
                    .shadow(color: type.color.opacity(0.2), radius: 5, x: 0, y: 2)
                }
                
                // 成就提示
                SUI.Text(type.levelSuggestion(level))
                    .font(SUI.Font.subheadline)
                    .multilineTextAlignment(.center)
                    .foregroundColor(getTextColor().opacity(0.7))
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(getCardBackgroundColor())
                    .cornerRadius(16)
                    .shadow(color: type.color.opacity(0.2), radius: 5, x: 0, y: 2)
            }
            .padding()
        }
        .navigationBarTitle("\(type.name)成就", displayMode: .inline)
        .navigationBarBackButtonHidden(true)
        .navigationBarItems(leading: BackButton(color: SUI.Color.white))
        .background(
            // 用主题响应背景
            getBackgroundGradient()
            .edgesIgnoringSafeArea(.all)
        )
        .toolbar {
            ToolbarItem(placement: .principal) {
                SUI.Text("\(type.name)成就")
                    .font(SUI.Font.headline)
                    .foregroundColor(SUI.Color.white)
            }
        }
        .toolbarBackground(getHeaderColor(), for: .navigationBar)
        .toolbarBackground(.visible, for: .navigationBar)
        .preferredColorScheme(themeManager.currentTheme == .classic ? .dark : .light)
        .onAppear {
            // 延迟动画以创建更好的效果
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                animateProgress = true
            }
        }
    }
    
    // 获取页眉背景颜色
    private func getHeaderColor() -> SUI.Color {
        switch themeManager.currentTheme {
        case .classic:
            return SUI.Color(hex: "0C4A45")  // 墨绿色
        case .elegantPurple:
            return SUI.Color(hex: "483D8B")  // 深紫色
        }
    }
    
    // 根据主题获取背景渐变
    private func getBackgroundGradient() -> SUI.LinearGradient {
        switch themeManager.currentTheme {
        case .classic:
            return SUI.LinearGradient(
                gradient: SUI.Gradient(
                    colors: [
                        SUI.Color.black,
                        SUI.Color.black.opacity(0.9)
                    ]
                ),
                startPoint: .top,
                endPoint: .bottom
            )
        case .elegantPurple:
            return SUI.LinearGradient(
                gradient: SUI.Gradient(
                    colors: [
                        SUI.Color(hex: "E6E6FA"),  // 淡紫色
                        SUI.Color(hex: "F8F7FF")   // 淡雅白紫色
                    ]
                ),
                startPoint: .top,
                endPoint: .bottom
            )
        }
    }
    
    // 根据主题获取卡片背景色
    private func getCardBackgroundColor() -> SUI.Color {
        switch themeManager.currentTheme {
        case .classic:
            return SUI.Color(hex: "222222")  // 深灰色
        case .elegantPurple:
            return SUI.Color.white  // 纯白色
        }
    }
    
    // 根据主题获取文本颜色
    private func getTextColor() -> SUI.Color {
        switch themeManager.currentTheme {
        case .classic:
            return SUI.Color.white
        case .elegantPurple:
            return SUI.Color(hex: "483D8B")  // 暗紫色
        }
    }
    
    // 获取按钮颜色
    private func getButtonColor() -> SUI.Color {
        switch themeManager.currentTheme {
        case .classic:
            return SUI.Color.black
        case .elegantPurple:
            return SUI.Color(hex: "8A2BE2")  // 深紫色
        }
    }
}

// 自定义返回按钮
fileprivate struct BackButton: SUI.View {
    @Environment(\.presentationMode) var presentationMode
    var color: SUI.Color = .black
    
    var body: some SUI.View {
        SUI.Button(action: {
            presentationMode.wrappedValue.dismiss()
        }) {
            SUI.HStack(spacing: 4) {
                SUI.Image(systemName: "chevron.left")
                SUI.Text("返回")
            }
            .foregroundColor(color)
        }
    }
}

// 为了兼容性保留原来的类型别名
typealias AchievementDetailView = TimeStopAchievementDetailView

struct TimeStopAchievementDetailView_Previews: PreviewProvider {
    static var previews: some SUI.View {
        SUI.Group {
            TimeStopAchievementDetailView(type: AchievementType.work, level: 3, minutes: 150)
                .environmentObject(ThemeManager())
            
            TimeStopAchievementDetailView(type: AchievementType.reading, level: 1, minutes: 40)
                .environmentObject(ThemeManager())
                
            TimeStopAchievementDetailView(type: AchievementType.meeting, level: 5, minutes: 1000)
                .environmentObject(ThemeManager())
        }
    }
} 